Things to do in the neuro library.

graphics -- Implement a more efficient coredraw.
	- Right now, every sprite redraws sections of the background.
	  This is unfortunately inefficient. Instead, we need to marshall a dynamic dirty
	  rectangle that will be redrawn only once.

neuronet -- It is possible to connect more than once with a single master.
	 - Currently, there is no check upon several NNet_Connect to
	   see if the master already has a running connection. It is very
	   important to make sure not to allow this!

neuronet -- New feature possibility of changing the PROTOCOL.
	 - TCP and UDP should be readily available.
	 - Multicast support would also be a very important feature
	   especially for devwatcher.

man -- the function Neuro_EBufIsEmpty:
	 - the documentation of the return 2 isn't
	   present in the man page. It is the value
	   returned when the input EBUF is NULL.

docs -- change of script:
	 - Implement (and finish) the new haskell neuroman
	   tool which supports html output (and eventually man pages).

docs -- removal of docs, to be moved independently of libneuro:
	 - I guess it would be better to simply move docs
	   out of the core sources and permit embedding of the
	   docs rather than directly having them in the tree would
	   be better at every levels.

docs -- add a configure entry for Tcl:
	 - the configure script needs to
	   check if Tcl is available to build the
	   manual pages. If it isn't, no errors should
	   be raised, only disable documentation building.

*** events (done) -- Implement an event based set of functions:
	 - Currently, the state of the mouse and 
	   keyboard are looped... the drivers will
	   need to be changed accordingly.

graphics/other (done) -- Implement Neuro_PutPixel and GetPixel:
	 - The location where those functions needs
	   to be put is probably best in the extlib
	   module.

debug -- bugged Neuro_DebugChannel:
	 - It doesn't always work, it needs to
	   be tested fully because it definitely
	   contains bugs. (warn+all error+all to
	   the filter and EBUF doesn't output any
	   warnings when it is supposed to do so).

misc/arg -- the source file doesn't have a code template
	 - The code template templates/template_source 
	   needs to be implemented for this module.

misc -- the whole misc/ directory's source files require
	a major cleanup.

misc -- move Color conversion functions:
	 - The color conversion functions should be moved
	   to their own source file (Neuro_RGB**).

extlib (X11) (passed) -- Lib_SetColorKey has a memory leak:
	 - A very nasty one on that, needs to be fixed.

	* After checking with valgrind I actually found
	  out that the memory leak lies in the X11
	  client interface... I recently upgraded my 
	  Xorg from 6.8.2 to 6.9.0 and that's what I'm
	  getting now... A huge amount of memory leaks.

extlib (SDL) -- Needs a buffer to hold the v_objects:
	 - I just noticed that the SDL doesn't have a
	   v_object cleaner like the X11 driver, we
	   need to implement one as soon as possible
	   to avoid a maximum amount of memory leaks.
	   This should be pretty easy, just need to
	   use the same method as in the X11 driver.

extlib (SDL) on w32 -- bug with the bitmap loader:
	 - When the algorithm tries to load compressed
	   bitmaps(not all though), theres a bug that 
	   makes it do a death loop and/or a 
	   segmentation fault... When theres a death 
	   loop, it eventually ends up in a 
	   segmentation fault. I suspect that
	   the SDL.dll API differs from the linux object
	   and either the PutPixel function or a lack of
	   step for bitmaps is the cause of it.

	   * After checking the bitmap code, it seems
	   the bug is related the the bits per pixel
	   when creating a v_object.

extlib (SDL) -- There seems to be a memory leak:
	 - When running the "simple" example
	   project with valgrind, I get memory
	   leaks with SDL. This could be SDL
	   though because I couldn't trace the
	   leaks. About 27KB leaked.

extlib -- the fonts have a memory leak:
	 - The code to load the fonts need
	   to be checked for memory leaks
	   because valgrind currently says
	   theres about 27k of constant mem
	   leak, no matter how much fonts you
	   create. It could be a leak in freetype
	   itself. 
	*** NOTE Just checked and the values
	   are different and they are the exact
	   same on another project not at all
	   using the fonts...

debug -- The whole debug.c file needs to change:
	 - The module needs to be put into src/misc
	   in the first place and every Debug_ functions
	   need to be interfaced to Neuro_ functions.

debug -- The implementation needs a namespace method:
	 - In order to avoid module name conflicts,
	   we will need to implement some kind of namespace
	   that projects will set in a similar matter as
	   NEURO_MODULE_CHANNEL but rather globally to the
	   whole project this time instead of just per module.
	*** DONE but needs more work in order to make it easily added
	    into projects as this requires a macro to be set in a global header
	    in order to work... which would be a little hard to figure for people
	    that start to use the library.

bitmap -- Add checks to approve bitmap files:
	 - In order to make the bitmap loader more robust,
	   it is imperative to implement a set of checks to
	   see if the input file to be loaded by the bitmap
	   loader are really bitmaps. a minimal version was
	   done to check the magic word. We also need to put
	   a check to see if the data size are correct according
	   to a value in the header(something like data size).

***general -- a split of code is required (high priority):
	 - After developping libneuronet heavily, it was clear
	   that libneuro became an heavy dependency. End coders
	   that use neuronet don't really want to use libneuro's
	   gfx api code and thus it becomes vastly unecessary code.
	 - A first non drastic approach was to implement a
	   configure option which disabled all of the video, font and
	   such functionalities of libneuro which was then unofficially
	   called light libneuro.
	 - Now, I want to fully split the libneuro code, the current
	   libneuro project will contain only a set of toolbox modules
	   like debug, ebuf, (the new lbuf) and string splitters.
	   The split task is probably easier than it seems but a certain
	   dilemma is required regarding the code history of the changes.
	   The safest approach would be to _copy_ the history for both
	   the splitted projects.
	 - The video project, code named libneurovideo for now will contain
	   all the rest not mentionned in the earlier step, things like extlib,
	   color functions, painter's algorithm, bitmap loader and such will be
	   the main functionnalities of the project. The project will have a safe
	   spot in essence exactly the same as the libneuronet spot
	   for quick inclusion into the libneuro compilation process.

general -- document the API (high priority):
	 - All the external functions of the API should be 
	   documented in a format that neuroman.tcl should
	   be able to parse.
	 - EBuf  [done needs to be revised]
	 - Video [not done]
	 - Events [not done]
	 - misc (including the extlib interface) [not done]

* extlib sdl -- default depth currently static 16 :
	- make this so it is settable and not just a static 16.

graphics engine : coredraw -- review and heavily test Graphics_RedrawSection :
	- I noticed this function is really the weak point of the painter's algorithm
	  and thus needs heavy testing and consolidation.

**goals for 0.50 :
	- Finish a full documentation of the library.
	- Make the project GPL v3 compatible and perhaps
	  completely make it GPL v3.

**goals for 0.60 :
	- Fix the bugs in the bitmap loading algorithm.
	- Code the new debugging method.
	- fix up the keyboard events in the SDL driver.
	- Clean up the source file in the misc directory.
	  All the functions inside other.c need to be placed
	  in meaningful source files.
	- Go through all the modules and implement the new
	  debugging method to them.

***goals for 1.0 :
	- make the extlib drivers their own shared 
	  objects that neuro could dynamically load
	  during runtime. A configuration file would
	  be used to set which one of the drivers to
	  load.
	- code openGL drivers for neuro, those drivers
	  would probably have more extensible set of
	  functions which could be used by the applications.
	  So I guess it would be a different branch than
	  the 2d extlib ones.

extlib X11 -- implement gfx shared memory :
	- in order to get far faster performances with
	  pretty much any graphical operations, the
	  addition of MIT shared memory for every images
	  will be used.

implement subprojects :
	libneuronet : done
	libneurogui : to do
	libgeometry : to do
	sprite module : to do
	image loader : to do
	
